---
// Get initial preference from server-side to prevent flash
const prefersReducedMotion = Astro.cookies.get('prefers-reduced-motion')?.boolean() || false
---

<button
  class="motion-toggle"
  data-preference="reduced-motion"
  aria-pressed={prefersReducedMotion ? 'true' : 'false'}
>
  <span class="motion-toggle__indicator"></span>
  {Astro.currentLocale === 'nl' ? 'Minder Beweging' : 'Reduce Motion'}
</button>

<script>
  function initMotionToggle() {
    // Clean up any existing event listeners
    const oldToggle = document.querySelector('.motion-toggle')
    if (oldToggle) {
      oldToggle.removeEventListener('click', handleClick)
    }

    const motionToggle = document.querySelector('.motion-toggle')
    const root = document.documentElement

    // Helper function to set button state and update classes
    function setButtonState(button: HTMLButtonElement, state: string) {
      button.setAttribute('aria-pressed', state)
      root.classList.toggle('prefers-reduced-motion', state === 'true')
      localStorage.setItem('prefers-reduced-motion', state)
    }

    // Click handler function
    function handleClick(event: Event) {
      const button = event.currentTarget as HTMLButtonElement
      const currentState = button.getAttribute('aria-pressed')
      const newState = currentState === 'true' ? 'false' : 'true'
      setButtonState(button, newState)
    }

    function initPreferences() {
      if (!motionToggle) return

      // Check localStorage first
      const storedPreference = localStorage.getItem('prefers-reduced-motion')

      if (storedPreference !== null) {
        setButtonState(motionToggle as HTMLButtonElement, storedPreference)
        return
      }

      // Fall back to system preference if no stored preference
      if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
        setButtonState(motionToggle as HTMLButtonElement, 'true')
      }
    }

    // Add click event listener
    if (motionToggle) {
      motionToggle.addEventListener('click', handleClick)
    }

    // Initialize preferences
    initPreferences()

    // Watch for system preference changes
    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)')
    mediaQuery.addEventListener('change', (e) => {
      if (!motionToggle) return
      if (localStorage.getItem('prefers-reduced-motion') === null) {
        setButtonState(motionToggle as HTMLButtonElement, e.matches ? 'true' : 'false')
      }
    })

    // Return cleanup function
    return () => {
      if (motionToggle) {
        motionToggle.removeEventListener('click', handleClick)
      }
    }
  }

  // Initial setup
  let cleanup = initMotionToggle()

  // Re-run on view transitions
  document.addEventListener('astro:page-load', () => {
    if (cleanup) cleanup()
    cleanup = initMotionToggle()
  })
</script>

<style>
  button {
    --led-size: 10px;
    --led-on: hsl(150deg 100% 50%);
    --led-off: var(--color-gray-500);
    --led-off-text: var(--color-gray-700);

    transition-duration: var(--animation-speed-fast);
    transition-property: rotate, scale, border-color;
    transition-timing-function: var(--cubic-bezier);
    border: 1px solid var(--color-gray-500);
    border-radius: var(--radius-3xl);
    padding: 0.05rem 0.55rem;
    inline-size: fit-content;
    font-size: var(--font-size--1);

    &:where(:hover, :focus-visible) {
      rotate: 1deg;
      scale: 1.05;
      border-color: var(--color-gray-600);
    }

    span {
      display: inline-block;
      position: relative;
      transition: all var(--animation-speed-fast) var(--cubic-bezier);
      margin-inline-end: var(--space-3xs);
      border-radius: 50%;
      background-color: var(--led-off);
      inline-size: var(--led-size);
      block-size: var(--led-size);
    }

    &[aria-pressed='false'] {
      color: var(--color-gray-700);
    }

    &[aria-pressed='true'] {
      border-color: var(--led-on);

      span {
        box-shadow:
          inset 0 -1px 1px hsl(150deg 100% 20% / 50%),
          inset 0 -1px 3px hsl(150deg 100% 20% / 50%),
          0 0 2px black,
          0 0 4px black,
          0 0 8px black,
          0 0 6px hsl(150deg 100% 50%),
          0 0 12px hsl(150deg 100% 50%);
        background-color: var(--led-on);
      }

      span::after {
        position: absolute;
        transform: rotate(-20deg);
        inset-block-start: 1.5px;
        inset-inline-start: 1.5px;
        border-radius: 1000px;
        background: white;
        inline-size: 3px;
        block-size: 1.5px;
        content: '';
      }
    }
  }
</style>
